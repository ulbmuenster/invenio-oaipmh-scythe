"""This file was generated by xsdata, v24.4, on 2024-04-22 17:48:31

Generator: DataclassGenerator
See: https://xsdata.readthedocs.io/
"""

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum

from xsdata.models.datatype import XmlDate, XmlDateTime

from oaipmh_scythe.models.mixins import HeaderMixin, RecordMixin

__NAMESPACE__ = "http://www.openarchives.org/OAI/2.0/"


class OaiPmherrorcode(Enum):
    CANNOT_DISSEMINATE_FORMAT = "cannotDisseminateFormat"
    ID_DOES_NOT_EXIST = "idDoesNotExist"
    BAD_ARGUMENT = "badArgument"
    BAD_VERB = "badVerb"
    NO_METADATA_FORMATS = "noMetadataFormats"
    NO_RECORDS_MATCH = "noRecordsMatch"
    BAD_RESUMPTION_TOKEN = "badResumptionToken"
    NO_SET_HIERARCHY = "noSetHierarchy"


@dataclass(slots=True)
class About:
    """Data "about" the record must be expressed in XML that is compliant with an XML Schema defined by a community."""

    class Meta:
        name = "aboutType"

    other_element: None | object = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        },
    )


class DeletedRecord(Enum):
    NO = "no"
    PERSISTENT = "persistent"
    TRANSIENT = "transient"


@dataclass(slots=True)
class Description:
    """The descriptionType is used for the description element in Identify and for setDescription element in ListSets.

    Content must be compliant with an XML Schema defined by a community.
    """

    class Meta:
        name = "descriptionType"

    other_element: None | object = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        },
    )


class Granularity(Enum):
    YYYY_MM_DD = "YYYY-MM-DD"
    YYYY_MM_DDTHH_MM_SS_Z = "YYYY-MM-DDThh:mm:ssZ"


@dataclass(slots=True)
class MetadataFormat:
    class Meta:
        name = "metadataFormatType"

    metadata_prefix: None | str = field(
        default=None,
        metadata={
            "name": "metadataPrefix",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
            "pattern": r"[A-Za-z0-9\-_\.!~\*'\(\)]+",
        },
    )
    schema: None | str = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    metadata_namespace: None | str = field(
        default=None,
        metadata={
            "name": "metadataNamespace",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )


@dataclass(slots=True)
class Metadata:
    """Metadata must be expressed in XML that complies with another XML Schema (namespace=#other).

    Metadata must be explicitly qualified in the response.
    """

    class Meta:
        name = "metadataType"

    other_element: None | object = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        },
    )


class ProtocolVersion(Enum):
    VALUE_2_0 = "2.0"


@dataclass(slots=True)
class ResumptionToken:
    """A resumptionToken may have 3 optional attributes and can be used in ListSets, ListIdentifiers, ListRecords
    responses.
    """

    class Meta:
        name = "resumptionTokenType"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    expiration_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "expirationDate",
            "type": "Attribute",
        },
    )
    complete_list_size: None | int = field(
        default=None,
        metadata={
            "name": "completeListSize",
            "type": "Attribute",
        },
    )
    cursor: None | int = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class Status(Enum):
    DELETED = "deleted"


class Verb(Enum):
    IDENTIFY = "Identify"
    LIST_METADATA_FORMATS = "ListMetadataFormats"
    LIST_SETS = "ListSets"
    GET_RECORD = "GetRecord"
    LIST_IDENTIFIERS = "ListIdentifiers"
    LIST_RECORDS = "ListRecords"


@dataclass(slots=True)
class Identify:
    class Meta:
        name = "IdentifyType"

    repository_name: None | str = field(
        default=None,
        metadata={
            "name": "repositoryName",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    base_url: None | str = field(
        default=None,
        metadata={
            "name": "baseURL",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    protocol_version: None | ProtocolVersion = field(
        default=None,
        metadata={
            "name": "protocolVersion",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    admin_email: list[str] = field(
        default_factory=list,
        metadata={
            "name": "adminEmail",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "min_occurs": 1,
            "pattern": r"\S+@(\S+\.)+\S+",
        },
    )
    earliest_datestamp: None | XmlDate | str = field(
        default=None,
        metadata={
            "name": "earliestDatestamp",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
            "pattern": r".*Z",
        },
    )
    deleted_record: None | DeletedRecord = field(
        default=None,
        metadata={
            "name": "deletedRecord",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    granularity: None | Granularity = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    compression: list[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    description: list[Description] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class ListMetadataFormats:
    class Meta:
        name = "ListMetadataFormatsType"

    metadata_format: list[MetadataFormat] = field(
        default_factory=list,
        metadata={
            "name": "metadataFormat",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "min_occurs": 1,
        },
    )


@dataclass(slots=True)
class OaiPmherror:
    class Meta:
        name = "OAI-PMHerrorType"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code: None | OaiPmherrorcode = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass(slots=True)
class Header(HeaderMixin):
    """A header has a unique identifier, a datestamp, and setSpec(s) in case the item from which the record is
    disseminated belongs to set(s).

    the header can carry a deleted status indicating that the record is deleted.
    """

    class Meta:
        name = "headerType"

    identifier: None | str = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    datestamp: None | XmlDate | str = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
            "pattern": r".*Z",
        },
    )
    set_spec: list[str] = field(
        default_factory=list,
        metadata={
            "name": "setSpec",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "pattern": r"([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*",
        },
    )
    status: None | Status = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass(slots=True)
class Request:
    """Define requestType, indicating the protocol request that led to the response.

    Element content is BASE-URL, attributes are arguments of protocol request, attribute-values are values of
    arguments of protocol request
    """

    class Meta:
        name = "requestType"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    verb: None | Verb = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    identifier: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    metadata_prefix: None | str = field(
        default=None,
        metadata={
            "name": "metadataPrefix",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9\-_\.!~\*'\(\)]+",
        },
    )
    from_value: None | XmlDate | str = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Attribute",
            "pattern": r".*Z",
        },
    )
    until: None | XmlDate | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*Z",
        },
    )
    set: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*",
        },
    )
    resumption_token: None | str = field(
        default=None,
        metadata={
            "name": "resumptionToken",
            "type": "Attribute",
        },
    )


@dataclass(slots=True)
class Set:
    class Meta:
        name = "setType"

    set_spec: None | str = field(
        default=None,
        metadata={
            "name": "setSpec",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
            "pattern": r"([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*",
        },
    )
    set_name: None | str = field(
        default=None,
        metadata={
            "name": "setName",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    set_description: list[Description] = field(
        default_factory=list,
        metadata={
            "name": "setDescription",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class ListIdentifiers:
    class Meta:
        name = "ListIdentifiersType"

    header: list[Header] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "min_occurs": 1,
        },
    )
    resumption_token: None | ResumptionToken = field(
        default=None,
        metadata={
            "name": "resumptionToken",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class ListSets:
    class Meta:
        name = "ListSetsType"

    set: list[Set] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "min_occurs": 1,
        },
    )
    resumption_token: None | ResumptionToken = field(
        default=None,
        metadata={
            "name": "resumptionToken",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class Record(RecordMixin):
    """A record has a header, a metadata part, and an optional about container."""

    class Meta:
        name = "recordType"

    header: None | Header = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    metadata: None | Metadata = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    about: list[About] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class GetRecord:
    class Meta:
        name = "GetRecordType"

    record: None | Record = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )


@dataclass(slots=True)
class ListRecords:
    class Meta:
        name = "ListRecordsType"

    record: list[Record] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "min_occurs": 1,
        },
    )
    resumption_token: None | ResumptionToken = field(
        default=None,
        metadata={
            "name": "resumptionToken",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class OaiPmhtype:
    class Meta:
        name = "OAI-PMHtype"

    response_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "responseDate",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    request: None | Request = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
            "required": True,
        },
    )
    error: list[OaiPmherror] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    identify: None | Identify = field(
        default=None,
        metadata={
            "name": "Identify",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    list_metadata_formats: None | ListMetadataFormats = field(
        default=None,
        metadata={
            "name": "ListMetadataFormats",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    list_sets: None | ListSets = field(
        default=None,
        metadata={
            "name": "ListSets",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    get_record: None | GetRecord = field(
        default=None,
        metadata={
            "name": "GetRecord",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    list_identifiers: None | ListIdentifiers = field(
        default=None,
        metadata={
            "name": "ListIdentifiers",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )
    list_records: None | ListRecords = field(
        default=None,
        metadata={
            "name": "ListRecords",
            "type": "Element",
            "namespace": "http://www.openarchives.org/OAI/2.0/",
        },
    )


@dataclass(slots=True)
class OaiPmh(OaiPmhtype):
    class Meta:
        name = "OAI-PMH"
        namespace = "http://www.openarchives.org/OAI/2.0/"
