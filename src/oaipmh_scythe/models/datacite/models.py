"""This file was generated by xsdata, v24.4, on 2024-04-21 17:40:55

Generator: DataclassGenerator
See: https://xsdata.readthedocs.io/
"""

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum


@dataclass(slots=True)
class Affiliation:
    """Uniquely identifies an affiliation, according to various identifier schemes."""

    class Meta:
        name = "affiliation"
        target_namespace = "http://datacite.org/schema/kernel-4"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 1,
        },
    )
    affiliation_identifier: None | str = field(
        default=None,
        metadata={
            "name": "affiliationIdentifier",
            "type": "Attribute",
        },
    )
    affiliation_identifier_scheme: None | str = field(
        default=None,
        metadata={
            "name": "affiliationIdentifierScheme",
            "type": "Attribute",
        },
    )
    scheme_uri: None | str = field(
        default=None,
        metadata={
            "name": "schemeURI",
            "type": "Attribute",
        },
    )


@dataclass(slots=True)
class Box:
    class Meta:
        name = "box"
        target_namespace = "http://datacite.org/schema/kernel-4"

    west_bound_longitude: None | float = field(
        default=None,
        metadata={
            "name": "westBoundLongitude",
            "type": "Element",
            "namespace": "http://datacite.org/schema/kernel-4",
            "required": True,
            "min_inclusive": -180.0,
            "max_inclusive": 180.0,
        },
    )
    east_bound_longitude: None | float = field(
        default=None,
        metadata={
            "name": "eastBoundLongitude",
            "type": "Element",
            "namespace": "http://datacite.org/schema/kernel-4",
            "required": True,
            "min_inclusive": -180.0,
            "max_inclusive": 180.0,
        },
    )
    south_bound_latitude: None | float = field(
        default=None,
        metadata={
            "name": "southBoundLatitude",
            "type": "Element",
            "namespace": "http://datacite.org/schema/kernel-4",
            "required": True,
            "min_inclusive": -90.0,
            "max_inclusive": 90.0,
        },
    )
    north_bound_latitude: None | float = field(
        default=None,
        metadata={
            "name": "northBoundLatitude",
            "type": "Element",
            "namespace": "http://datacite.org/schema/kernel-4",
            "required": True,
            "min_inclusive": -90.0,
            "max_inclusive": 90.0,
        },
    )


class ContributorType(Enum):
    """The type of contributor of the resource."""

    CONTACT_PERSON = "ContactPerson"
    DATA_COLLECTOR = "DataCollector"
    DATA_CURATOR = "DataCurator"
    DATA_MANAGER = "DataManager"
    DISTRIBUTOR = "Distributor"
    EDITOR = "Editor"
    HOSTING_INSTITUTION = "HostingInstitution"
    OTHER = "Other"
    PRODUCER = "Producer"
    PROJECT_LEADER = "ProjectLeader"
    PROJECT_MANAGER = "ProjectManager"
    PROJECT_MEMBER = "ProjectMember"
    REGISTRATION_AGENCY = "RegistrationAgency"
    REGISTRATION_AUTHORITY = "RegistrationAuthority"
    RELATED_PERSON = "RelatedPerson"
    RESEARCH_GROUP = "ResearchGroup"
    RIGHTS_HOLDER = "RightsHolder"
    RESEARCHER = "Researcher"
    SPONSOR = "Sponsor"
    SUPERVISOR = "Supervisor"
    WORK_PACKAGE_LEADER = "WorkPackageLeader"


class DateType(Enum):
    """The type of date.

    Use RKMS‚ÄêISO8601 standard for depicting date ranges.To indicate the end of an embargo period, use Available.
    To indicate the start of an embargo period, use Submitted or Accepted, as appropriate.
    """

    ACCEPTED = "Accepted"
    AVAILABLE = "Available"
    COLLECTED = "Collected"
    COPYRIGHTED = "Copyrighted"
    CREATED = "Created"
    ISSUED = "Issued"
    OTHER = "Other"
    SUBMITTED = "Submitted"
    UPDATED = "Updated"
    VALID = "Valid"
    WITHDRAWN = "Withdrawn"


class DescriptionType(Enum):
    """The type of the description."""

    ABSTRACT = "Abstract"
    METHODS = "Methods"
    SERIES_INFORMATION = "SeriesInformation"
    TABLE_OF_CONTENTS = "TableOfContents"
    TECHNICAL_INFO = "TechnicalInfo"
    OTHER = "Other"


class FunderIdentifierType(Enum):
    """The type of the funderIdentifier."""

    ISNI = "ISNI"
    GRID = "GRID"
    ROR = "ROR"
    CROSSREF_FUNDER_ID = "Crossref Funder ID"
    OTHER = "Other"


@dataclass(slots=True)
class NameIdentifier:
    """Uniquely identifies a creator or contributor, according to various identifier
    schemes.
    """

    class Meta:
        name = "nameIdentifier"
        target_namespace = "http://datacite.org/schema/kernel-4"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "min_length": 1,
        },
    )
    name_identifier_scheme: None | str = field(
        default=None,
        metadata={
            "name": "nameIdentifierScheme",
            "type": "Attribute",
            "required": True,
        },
    )
    scheme_uri: None | str = field(
        default=None,
        metadata={
            "name": "schemeURI",
            "type": "Attribute",
        },
    )


class NameType(Enum):
    ORGANIZATIONAL = "Organizational"
    PERSONAL = "Personal"


class NumberType(Enum):
    ARTICLE = "Article"
    CHAPTER = "Chapter"
    REPORT = "Report"
    OTHER = "Other"


@dataclass(slots=True)
class Point:
    class Meta:
        name = "point"
        target_namespace = "http://datacite.org/schema/kernel-4"

    point_longitude: None | float = field(
        default=None,
        metadata={
            "name": "pointLongitude",
            "type": "Element",
            "namespace": "http://datacite.org/schema/kernel-4",
            "required": True,
            "min_inclusive": -180.0,
            "max_inclusive": 180.0,
        },
    )
    point_latitude: None | float = field(
        default=None,
        metadata={
            "name": "pointLatitude",
            "type": "Element",
            "namespace": "http://datacite.org/schema/kernel-4",
            "required": True,
            "min_inclusive": -90.0,
            "max_inclusive": 90.0,
        },
    )


class RelatedIdentifierType(Enum):
    """The type of the RelatedIdentifier."""

    ARK = "ARK"
    AR_XIV = "arXiv"
    BIBCODE = "bibcode"
    DOI = "DOI"
    EAN13 = "EAN13"
    EISSN = "EISSN"
    HANDLE = "Handle"
    IGSN = "IGSN"
    ISBN = "ISBN"
    ISSN = "ISSN"
    ISTC = "ISTC"
    LISSN = "LISSN"
    LSID = "LSID"
    PMID = "PMID"
    PURL = "PURL"
    UPC = "UPC"
    URL = "URL"
    URN = "URN"
    W3ID = "w3id"


class RelationType(Enum):
    """Description of the relationship of the resource being registered (A) and the
    related resource (B).
    """

    IS_CITED_BY = "IsCitedBy"
    CITES = "Cites"
    IS_SUPPLEMENT_TO = "IsSupplementTo"
    IS_SUPPLEMENTED_BY = "IsSupplementedBy"
    IS_CONTINUED_BY = "IsContinuedBy"
    CONTINUES = "Continues"
    IS_NEW_VERSION_OF = "IsNewVersionOf"
    IS_PREVIOUS_VERSION_OF = "IsPreviousVersionOf"
    IS_PART_OF = "IsPartOf"
    HAS_PART = "HasPart"
    IS_PUBLISHED_IN = "IsPublishedIn"
    IS_REFERENCED_BY = "IsReferencedBy"
    REFERENCES = "References"
    IS_DOCUMENTED_BY = "IsDocumentedBy"
    DOCUMENTS = "Documents"
    IS_COMPILED_BY = "IsCompiledBy"
    COMPILES = "Compiles"
    IS_VARIANT_FORM_OF = "IsVariantFormOf"
    IS_ORIGINAL_FORM_OF = "IsOriginalFormOf"
    IS_IDENTICAL_TO = "IsIdenticalTo"
    HAS_METADATA = "HasMetadata"
    IS_METADATA_FOR = "IsMetadataFor"
    REVIEWS = "Reviews"
    IS_REVIEWED_BY = "IsReviewedBy"
    IS_DERIVED_FROM = "IsDerivedFrom"
    IS_SOURCE_OF = "IsSourceOf"
    DESCRIBES = "Describes"
    IS_DESCRIBED_BY = "IsDescribedBy"
    HAS_VERSION = "HasVersion"
    IS_VERSION_OF = "IsVersionOf"
    REQUIRES = "Requires"
    IS_REQUIRED_BY = "IsRequiredBy"
    OBSOLETES = "Obsoletes"
    IS_OBSOLETED_BY = "IsObsoletedBy"
    COLLECTS = "Collects"
    IS_COLLECTED_BY = "IsCollectedBy"


class ResourceType(Enum):
    """The general type of a resource."""

    AUDIOVISUAL = "Audiovisual"
    BOOK = "Book"
    BOOK_CHAPTER = "BookChapter"
    COLLECTION = "Collection"
    COMPUTATIONAL_NOTEBOOK = "ComputationalNotebook"
    CONFERENCE_PAPER = "ConferencePaper"
    CONFERENCE_PROCEEDING = "ConferenceProceeding"
    DATA_PAPER = "DataPaper"
    DATASET = "Dataset"
    DISSERTATION = "Dissertation"
    EVENT = "Event"
    IMAGE = "Image"
    INSTRUMENT = "Instrument"
    INTERACTIVE_RESOURCE = "InteractiveResource"
    JOURNAL = "Journal"
    JOURNAL_ARTICLE = "JournalArticle"
    MODEL = "Model"
    OUTPUT_MANAGEMENT_PLAN = "OutputManagementPlan"
    PEER_REVIEW = "PeerReview"
    PHYSICAL_OBJECT = "PhysicalObject"
    PREPRINT = "Preprint"
    REPORT = "Report"
    SERVICE = "Service"
    SOFTWARE = "Software"
    SOUND = "Sound"
    STANDARD = "Standard"
    STUDY_REGISTRATION = "StudyRegistration"
    TEXT = "Text"
    WORKFLOW = "Workflow"
    OTHER = "Other"


class TitleType(Enum):
    ALTERNATIVE_TITLE = "AlternativeTitle"
    SUBTITLE = "Subtitle"
    TRANSLATED_TITLE = "TranslatedTitle"
    OTHER = "Other"


class LangValue(Enum):
    VALUE = ""


@dataclass(slots=True)
class Resource:
    """Root element of a single record.

    This wrapper element is for XML implementation only and is not defined in the DataCite DOI standard.
    Note: This is the case for all wrapper elements within this schema.
    No content in this wrapper element.

    Attributes:
        identifier: A persistent identifier that identifies a resource.
        creators:
        titles:
        publisher: The name of the entity that holds, archives, publishes prints, distributes, releases, issues,
            or produces the resource. This property will be used to formulate the citation, so consider the
            prominence of the role. In the case of datasets, "publish" is understood to mean making the data
            available to the community of researchers.
        publication_year: Year when the data is made publicly available. If an embargo period has been in effect,
            use the date when the embargo period ends. In the case of datasets, "publish" is understood to mean
            making the data available on a specific date to the community of researchers. If there is no standard
            publication year value, use the date that would be preferred from a citation perspective. YYYY
        resource_type: The type of a resource. You may enter an additional free text description. The format is
            open, but the preferred format is a single term of some detail so that a pair can be formed with the
            sub-property.
        subjects:
        contributors:
        dates:
        language: Primary language of the resource. Allowed values are taken from  IETF BCP 47, ISO 639-1
            language codes.
        alternate_identifiers:
        related_identifiers:
        sizes:
        formats:
        version: Version number of the resource. If the primary resource has changed the version number
            increases. Register a new identifier for a major version change. Individual stewards need to
            determine which are major vs. minor versions. May be used in conjunction with properties 11 and 12
            (AlternateIdentifier and RelatedIdentifier) to indicate various information updates. May be used in
            conjunction with property 17 (Description) to indicate the nature and file/record range of version.
        rights_list:
        descriptions:
        geo_locations:
        funding_references:
        related_items:
    """

    class Meta:
        name = "resource"
        namespace = "http://datacite.org/schema/kernel-4"

    identifier: None | Resource.Identifier = field(
        default=None,
        metadata={
            "type": "Element",
            "required": True,
        },
    )
    creators: None | Resource.Creators = field(
        default=None,
        metadata={
            "type": "Element",
            "required": True,
        },
    )
    titles: None | Resource.Titles = field(
        default=None,
        metadata={
            "type": "Element",
            "required": True,
        },
    )
    publisher: None | Resource.Publisher = field(
        default=None,
        metadata={
            "type": "Element",
            "required": True,
        },
    )
    publication_year: None | str = field(
        default=None,
        metadata={
            "name": "publicationYear",
            "type": "Element",
            "required": True,
            "pattern": r"[\d]{4}",
        },
    )
    resource_type: None | Resource.ResourceType = field(
        default=None,
        metadata={
            "name": "resourceType",
            "type": "Element",
            "required": True,
        },
    )
    subjects: None | Resource.Subjects = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    contributors: None | Resource.Contributors = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    dates: None | Resource.Dates = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    language: None | str = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    alternate_identifiers: None | Resource.AlternateIdentifiers = field(
        default=None,
        metadata={
            "name": "alternateIdentifiers",
            "type": "Element",
        },
    )
    related_identifiers: None | Resource.RelatedIdentifiers = field(
        default=None,
        metadata={
            "name": "relatedIdentifiers",
            "type": "Element",
        },
    )
    sizes: None | Resource.Sizes = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    formats: None | Resource.Formats = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    version: None | str = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    rights_list: None | Resource.RightsList = field(
        default=None,
        metadata={
            "name": "rightsList",
            "type": "Element",
        },
    )
    descriptions: None | Resource.Descriptions = field(
        default=None,
        metadata={
            "type": "Element",
        },
    )
    geo_locations: None | Resource.GeoLocations = field(
        default=None,
        metadata={
            "name": "geoLocations",
            "type": "Element",
        },
    )
    funding_references: None | Resource.FundingReferences = field(
        default=None,
        metadata={
            "name": "fundingReferences",
            "type": "Element",
        },
    )
    related_items: None | Resource.RelatedItems = field(
        default=None,
        metadata={
            "name": "relatedItems",
            "type": "Element",
        },
    )

    @dataclass(slots=True)
    class Identifier:
        value: str = field(
            default="",
            metadata={
                "required": True,
                "min_length": 1,
            },
        )
        identifier_type: None | object = field(
            default=None,
            metadata={
                "name": "identifierType",
                "type": "Attribute",
                "required": True,
            },
        )

    @dataclass(slots=True)
    class Creators:
        """Attributes:
        creator: The main researchers involved working on the data, or the authors of the publication in
            priority order. May be a corporate/institutional or personal name. Format: Family, Given.
            Personal names can be further specified using givenName and familyName.
        """

        creator: list[Resource.Creators.Creator] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "min_occurs": 1,
            },
        )

        @dataclass(slots=True)
        class Creator:
            creator_name: None | Resource.Creators.Creator.CreatorName = field(
                default=None,
                metadata={
                    "name": "creatorName",
                    "type": "Element",
                    "required": True,
                },
            )
            given_name: None | object = field(
                default=None,
                metadata={
                    "name": "givenName",
                    "type": "Element",
                },
            )
            family_name: None | object = field(
                default=None,
                metadata={
                    "name": "familyName",
                    "type": "Element",
                },
            )
            name_identifier: list[object] = field(
                default_factory=list,
                metadata={
                    "name": "nameIdentifier",
                    "type": "Element",
                },
            )
            affiliation: list[object] = field(
                default_factory=list,
                metadata={
                    "type": "Element",
                },
            )

            @dataclass(slots=True)
            class CreatorName:
                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                    },
                )
                name_type: None | NameType = field(
                    default=None,
                    metadata={
                        "name": "nameType",
                        "type": "Attribute",
                    },
                )
                lang: None | str | LangValue = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                        "namespace": "http://www.w3.org/XML/1998/namespace",
                    },
                )

    @dataclass(slots=True)
    class Titles:
        """Attributes:
        title: A name or title by which a resource is known.
        """

        title: list[Resource.Titles.Title] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "min_occurs": 1,
            },
        )

        @dataclass(slots=True)
        class Title:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                },
            )
            title_type: None | TitleType = field(
                default=None,
                metadata={
                    "name": "titleType",
                    "type": "Attribute",
                },
            )
            lang: None | str | LangValue = field(
                default=None,
                metadata={
                    "type": "Attribute",
                    "namespace": "http://www.w3.org/XML/1998/namespace",
                },
            )

    @dataclass(slots=True)
    class Publisher:
        value: str = field(
            default="",
            metadata={
                "required": True,
                "min_length": 1,
            },
        )
        publisher_identifier: None | str = field(
            default=None,
            metadata={
                "name": "publisherIdentifier",
                "type": "Attribute",
            },
        )
        publisher_identifier_scheme: None | str = field(
            default=None,
            metadata={
                "name": "publisherIdentifierScheme",
                "type": "Attribute",
            },
        )
        scheme_uri: None | str = field(
            default=None,
            metadata={
                "name": "schemeURI",
                "type": "Attribute",
            },
        )
        lang: None | str | LangValue = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/XML/1998/namespace",
            },
        )

    @dataclass(slots=True)
    class ResourceType:
        value: str = field(
            default="",
            metadata={
                "required": True,
            },
        )
        resource_type_general: None | ResourceType = field(
            default=None,
            metadata={
                "name": "resourceTypeGeneral",
                "type": "Attribute",
                "required": True,
            },
        )

    @dataclass(slots=True)
    class Subjects:
        """Attributes:
        subject: Subject, keywords, classification codes, or key phrases describing the resource.
        """

        subject: list[Resource.Subjects.Subject] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class Subject:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                },
            )
            subject_scheme: None | object = field(
                default=None,
                metadata={
                    "name": "subjectScheme",
                    "type": "Attribute",
                },
            )
            scheme_uri: None | str = field(
                default=None,
                metadata={
                    "name": "schemeURI",
                    "type": "Attribute",
                },
            )
            value_uri: None | str = field(
                default=None,
                metadata={
                    "name": "valueURI",
                    "type": "Attribute",
                },
            )
            classification_code: None | str = field(
                default=None,
                metadata={
                    "name": "classificationCode",
                    "type": "Attribute",
                },
            )
            lang: None | str | LangValue = field(
                default=None,
                metadata={
                    "type": "Attribute",
                    "namespace": "http://www.w3.org/XML/1998/namespace",
                },
            )

    @dataclass(slots=True)
    class Contributors:
        """Attributes:
        contributor: The institution or person responsible for collecting, creating, or otherwise
            contributing to the development of the dataset. The personal name format should be: Family,
            Given.
        """

        contributor: list[Resource.Contributors.Contributor] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class Contributor:
            contributor_name: None | Resource.Contributors.Contributor.ContributorName = field(
                default=None,
                metadata={
                    "name": "contributorName",
                    "type": "Element",
                    "required": True,
                },
            )
            given_name: None | object = field(
                default=None,
                metadata={
                    "name": "givenName",
                    "type": "Element",
                },
            )
            family_name: None | object = field(
                default=None,
                metadata={
                    "name": "familyName",
                    "type": "Element",
                },
            )
            name_identifier: list[object] = field(
                default_factory=list,
                metadata={
                    "name": "nameIdentifier",
                    "type": "Element",
                },
            )
            affiliation: list[object] = field(
                default_factory=list,
                metadata={
                    "type": "Element",
                },
            )
            contributor_type: None | ContributorType = field(
                default=None,
                metadata={
                    "name": "contributorType",
                    "type": "Attribute",
                    "required": True,
                },
            )

            @dataclass(slots=True)
            class ContributorName:
                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                        "min_length": 1,
                    },
                )
                name_type: None | NameType = field(
                    default=None,
                    metadata={
                        "name": "nameType",
                        "type": "Attribute",
                    },
                )
                lang: None | str | LangValue = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                        "namespace": "http://www.w3.org/XML/1998/namespace",
                    },
                )

    @dataclass(slots=True)
    class Dates:
        """Attributes:
        date: Different dates relevant to the work. YYYY,YYYY-MM-DD, YYYY-MM-DDThh:mm:ssTZD or any other
            format or level of granularity described in W3CDTF. Use RKMS-ISO8601 standard for depicting date
            ranges.
        """

        date: list[Resource.Dates.Date] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class Date:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                },
            )
            date_type: None | DateType = field(
                default=None,
                metadata={
                    "name": "dateType",
                    "type": "Attribute",
                    "required": True,
                },
            )
            date_information: None | object = field(
                default=None,
                metadata={
                    "name": "dateInformation",
                    "type": "Attribute",
                },
            )

    @dataclass(slots=True)
    class AlternateIdentifiers:
        """Attributes:
        alternate_identifier: An identifier or identifiers other than the primary Identifier applied to the
            resource being registered. This may be any alphanumeric string which is unique within its domain
            of issue. May be used for local identifiers. AlternateIdentifier should be used for another
            identifier of the same instance (same location, same file).
        """

        alternate_identifier: list[Resource.AlternateIdentifiers.AlternateIdentifier] = field(
            default_factory=list,
            metadata={
                "name": "alternateIdentifier",
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class AlternateIdentifier:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                },
            )
            alternate_identifier_type: None | object = field(
                default=None,
                metadata={
                    "name": "alternateIdentifierType",
                    "type": "Attribute",
                    "required": True,
                },
            )

    @dataclass(slots=True)
    class RelatedIdentifiers:
        """Attributes:
        related_identifier: Identifiers of related resources. Use this property to indicate subsets of
            properties, as appropriate.
        """

        related_identifier: list[Resource.RelatedIdentifiers.RelatedIdentifier] = field(
            default_factory=list,
            metadata={
                "name": "relatedIdentifier",
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class RelatedIdentifier:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                },
            )
            resource_type_general: None | ResourceType = field(
                default=None,
                metadata={
                    "name": "resourceTypeGeneral",
                    "type": "Attribute",
                },
            )
            related_identifier_type: None | RelatedIdentifierType = field(
                default=None,
                metadata={
                    "name": "relatedIdentifierType",
                    "type": "Attribute",
                    "required": True,
                },
            )
            relation_type: None | RelationType = field(
                default=None,
                metadata={
                    "name": "relationType",
                    "type": "Attribute",
                    "required": True,
                },
            )
            related_metadata_scheme: None | object = field(
                default=None,
                metadata={
                    "name": "relatedMetadataScheme",
                    "type": "Attribute",
                },
            )
            scheme_uri: None | str = field(
                default=None,
                metadata={
                    "name": "schemeURI",
                    "type": "Attribute",
                },
            )
            scheme_type: None | object = field(
                default=None,
                metadata={
                    "name": "schemeType",
                    "type": "Attribute",
                },
            )

    @dataclass(slots=True)
    class Sizes:
        """Attributes:
        size: Unstructures size information about the resource.
        """

        size: list[str] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

    @dataclass(slots=True)
    class Formats:
        """Attributes:
        format: Technical format of the resource. Use file extension or MIME type where possible.
        """

        format: list[str] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

    @dataclass(slots=True)
    class RightsList:
        """Attributes:
        rights: Any rights information for this resource. Provide a rights management statement for the
            resource or reference a service providing such information. Include embargo information if
            applicable. Use the complete title of a license and include version information if applicable.
        """

        rights: list[Resource.RightsList.Rights] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class Rights:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                },
            )
            rights_uri: None | str = field(
                default=None,
                metadata={
                    "name": "rightsURI",
                    "type": "Attribute",
                },
            )
            rights_identifier: None | object = field(
                default=None,
                metadata={
                    "name": "rightsIdentifier",
                    "type": "Attribute",
                },
            )
            rights_identifier_scheme: None | object = field(
                default=None,
                metadata={
                    "name": "rightsIdentifierScheme",
                    "type": "Attribute",
                },
            )
            scheme_uri: None | str = field(
                default=None,
                metadata={
                    "name": "schemeURI",
                    "type": "Attribute",
                },
            )
            lang: None | str | LangValue = field(
                default=None,
                metadata={
                    "type": "Attribute",
                    "namespace": "http://www.w3.org/XML/1998/namespace",
                },
            )

    @dataclass(slots=True)
    class Descriptions:
        """Attributes:
        description: All additional information that does not fit in any of the other categories. May be used
            for technical information. It is a best practice to supply a description.
        """

        description: list[Resource.Descriptions.Description] = field(
            default_factory=list,
            metadata={
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class Description:
            description_type: None | DescriptionType = field(
                default=None,
                metadata={
                    "name": "descriptionType",
                    "type": "Attribute",
                    "required": True,
                },
            )
            lang: None | str | LangValue = field(
                default=None,
                metadata={
                    "type": "Attribute",
                    "namespace": "http://www.w3.org/XML/1998/namespace",
                },
            )
            content: list[object] = field(
                default_factory=list,
                metadata={
                    "type": "Wildcard",
                    "namespace": "##any",
                    "mixed": True,
                    "choices": (
                        {
                            "name": "br",
                            "type": object,
                        },
                    ),
                },
            )

    @dataclass(slots=True)
    class GeoLocations:
        geo_location: list[Resource.GeoLocations.GeoLocation] = field(
            default_factory=list,
            metadata={
                "name": "geoLocation",
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class GeoLocation:
            """Attributes:
            geo_location_place: Spatial region or named place where the data was gathered or about which the
                data is focused.
            geo_location_point: A point contains a single latitude-longitude pair.
            geo_location_box: A box contains two white space separated latitude-longitude pairs, with each
                pair separated by whitespace. The first pair is the lower corner, the second is the upper
                corner.
            geo_location_polygon: A drawn polygon area, defined by a set of points and lines connecting the
                points in a closed chain.
            """

            geo_location_place: list[object] = field(
                default_factory=list,
                metadata={
                    "name": "geoLocationPlace",
                    "type": "Element",
                },
            )
            geo_location_point: list[Point] = field(
                default_factory=list,
                metadata={
                    "name": "geoLocationPoint",
                    "type": "Element",
                },
            )
            geo_location_box: list[Box] = field(
                default_factory=list,
                metadata={
                    "name": "geoLocationBox",
                    "type": "Element",
                },
            )
            geo_location_polygon: list[Resource.GeoLocations.GeoLocation.GeoLocationPolygon] = field(
                default_factory=list,
                metadata={
                    "name": "geoLocationPolygon",
                    "type": "Element",
                },
            )

            @dataclass(slots=True)
            class GeoLocationPolygon:
                polygon_point: list[Point] = field(
                    default_factory=list,
                    metadata={
                        "name": "polygonPoint",
                        "type": "Element",
                        "min_occurs": 4,
                    },
                )
                in_polygon_point: None | Point = field(
                    default=None,
                    metadata={
                        "name": "inPolygonPoint",
                        "type": "Element",
                    },
                )

    @dataclass(slots=True)
    class FundingReferences:
        """Attributes:
        funding_reference: Information about financial support (funding) for the resource being registered.
        """

        funding_reference: list[Resource.FundingReferences.FundingReference] = field(
            default_factory=list,
            metadata={
                "name": "fundingReference",
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class FundingReference:
            """Attributes:
            funder_name: Name of the funding provider.
            funder_identifier: Uniquely identifies a funding entity, according to various types.
            award_number: The code assigned by the funder to a sponsored award (grant).
            award_title: The human readable title of the award (grant).
            """

            funder_name: None | str = field(
                default=None,
                metadata={
                    "name": "funderName",
                    "type": "Element",
                    "required": True,
                    "min_length": 1,
                },
            )
            funder_identifier: None | Resource.FundingReferences.FundingReference.FunderIdentifier = field(
                default=None,
                metadata={
                    "name": "funderIdentifier",
                    "type": "Element",
                },
            )
            award_number: None | Resource.FundingReferences.FundingReference.AwardNumber = field(
                default=None,
                metadata={
                    "name": "awardNumber",
                    "type": "Element",
                },
            )
            award_title: None | object = field(
                default=None,
                metadata={
                    "name": "awardTitle",
                    "type": "Element",
                },
            )

            @dataclass(slots=True)
            class FunderIdentifier:
                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                    },
                )
                funder_identifier_type: None | FunderIdentifierType = field(
                    default=None,
                    metadata={
                        "name": "funderIdentifierType",
                        "type": "Attribute",
                        "required": True,
                    },
                )
                scheme_uri: None | str = field(
                    default=None,
                    metadata={
                        "name": "schemeURI",
                        "type": "Attribute",
                    },
                )

            @dataclass(slots=True)
            class AwardNumber:
                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                    },
                )
                award_uri: None | str = field(
                    default=None,
                    metadata={
                        "name": "awardURI",
                        "type": "Attribute",
                    },
                )

    @dataclass(slots=True)
    class RelatedItems:
        """Attributes:
        related_item: Information about a resource related to the one being registered e.g. a journal or book
            of which the article or chapter is part.
        """

        related_item: list[Resource.RelatedItems.RelatedItem] = field(
            default_factory=list,
            metadata={
                "name": "relatedItem",
                "type": "Element",
            },
        )

        @dataclass(slots=True)
        class RelatedItem:
            """Attributes:
            related_item_identifier: The identifier for the related item.
            creators:
            titles:
            publication_year: The year when the item was or will be made publicly available.
            volume: Volume of the related item.
            issue: Issue number or name of the related item.
            number: Number of the related item e.g. report number of article number.
            first_page: First page of the related item e.g. of the chapter, article, or conference paper.
            last_page: Last page of the related item e.g. of the chapter, article, or conference paper.
            publisher: The name of the entity that holds, archives, publishes prints, distributes, releases,
                issues, or produces the resource. This property will be used to formulate the citation, so
                consider the prominence of the role.
            edition: Edition or version of the related item.
            contributors:
            related_item_type: The type of the related item, e.g. journal article, book or chapter.
            relation_type: Description of the relationship of the resource being registered (A) and the
                related resource (B).
            """

            related_item_identifier: None | Resource.RelatedItems.RelatedItem.RelatedItemIdentifier = field(
                default=None,
                metadata={
                    "name": "relatedItemIdentifier",
                    "type": "Element",
                },
            )
            creators: None | Resource.RelatedItems.RelatedItem.Creators = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            titles: None | Resource.RelatedItems.RelatedItem.Titles = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            publication_year: None | str = field(
                default=None,
                metadata={
                    "name": "publicationYear",
                    "type": "Element",
                    "pattern": r"[\d]{4}",
                },
            )
            volume: None | object = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            issue: None | object = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            number: None | Resource.RelatedItems.RelatedItem.Number = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            first_page: None | object = field(
                default=None,
                metadata={
                    "name": "firstPage",
                    "type": "Element",
                },
            )
            last_page: None | object = field(
                default=None,
                metadata={
                    "name": "lastPage",
                    "type": "Element",
                },
            )
            publisher: None | object = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            edition: None | object = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            contributors: None | Resource.RelatedItems.RelatedItem.Contributors = field(
                default=None,
                metadata={
                    "type": "Element",
                },
            )
            related_item_type: None | ResourceType = field(
                default=None,
                metadata={
                    "name": "relatedItemType",
                    "type": "Attribute",
                    "required": True,
                },
            )
            relation_type: None | RelationType = field(
                default=None,
                metadata={
                    "name": "relationType",
                    "type": "Attribute",
                    "required": True,
                },
            )

            @dataclass(slots=True)
            class RelatedItemIdentifier:
                """Attributes:
                value:
                related_item_identifier_type: The type of the Identifier for the related item e.g. DOI.
                related_metadata_scheme: The name of the scheme.
                scheme_uri: The URI of the relatedMetadataScheme.
                scheme_type: The type of the relatedMetadataScheme, linked with the schemeURI.
                """

                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                    },
                )
                related_item_identifier_type: None | RelatedIdentifierType = field(
                    default=None,
                    metadata={
                        "name": "relatedItemIdentifierType",
                        "type": "Attribute",
                    },
                )
                related_metadata_scheme: None | object = field(
                    default=None,
                    metadata={
                        "name": "relatedMetadataScheme",
                        "type": "Attribute",
                    },
                )
                scheme_uri: None | str = field(
                    default=None,
                    metadata={
                        "name": "schemeURI",
                        "type": "Attribute",
                    },
                )
                scheme_type: None | object = field(
                    default=None,
                    metadata={
                        "name": "schemeType",
                        "type": "Attribute",
                    },
                )

            @dataclass(slots=True)
            class Creators:
                """Attributes:
                creator: The institution or person responsible for creating the related resource. To supply
                    multiple creators, repeat this property.
                """

                creator: list[Resource.RelatedItems.RelatedItem.Creators.Creator] = field(
                    default_factory=list,
                    metadata={
                        "type": "Element",
                    },
                )

                @dataclass(slots=True)
                class Creator:
                    creator_name: None | Resource.RelatedItems.RelatedItem.Creators.Creator.CreatorName = field(
                        default=None,
                        metadata={
                            "name": "creatorName",
                            "type": "Element",
                            "required": True,
                        },
                    )
                    given_name: None | object = field(
                        default=None,
                        metadata={
                            "name": "givenName",
                            "type": "Element",
                        },
                    )
                    family_name: None | object = field(
                        default=None,
                        metadata={
                            "name": "familyName",
                            "type": "Element",
                        },
                    )

                    @dataclass(slots=True)
                    class CreatorName:
                        value: str = field(
                            default="",
                            metadata={
                                "required": True,
                            },
                        )
                        name_type: None | NameType = field(
                            default=None,
                            metadata={
                                "name": "nameType",
                                "type": "Attribute",
                            },
                        )
                        lang: None | str | LangValue = field(
                            default=None,
                            metadata={
                                "type": "Attribute",
                                "namespace": "http://www.w3.org/XML/1998/namespace",
                            },
                        )

            @dataclass(slots=True)
            class Titles:
                """Attributes:
                title: Title of the related item.
                """

                title: list[Resource.RelatedItems.RelatedItem.Titles.Title] = field(
                    default_factory=list,
                    metadata={
                        "type": "Element",
                    },
                )

                @dataclass(slots=True)
                class Title:
                    value: str = field(
                        default="",
                        metadata={
                            "required": True,
                        },
                    )
                    title_type: None | TitleType = field(
                        default=None,
                        metadata={
                            "name": "titleType",
                            "type": "Attribute",
                        },
                    )
                    lang: None | str | LangValue = field(
                        default=None,
                        metadata={
                            "type": "Attribute",
                            "namespace": "http://www.w3.org/XML/1998/namespace",
                        },
                    )

            @dataclass(slots=True)
            class Number:
                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                    },
                )
                number_type: None | NumberType = field(
                    default=None,
                    metadata={
                        "name": "numberType",
                        "type": "Attribute",
                    },
                )

            @dataclass(slots=True)
            class Contributors:
                """Attributes:
                contributor: The institution or person responsible for collecting, managing, distributing, or
                    otherwise contributing to the development of the resource.
                """

                contributor: list[Resource.RelatedItems.RelatedItem.Contributors.Contributor] = field(
                    default_factory=list,
                    metadata={
                        "type": "Element",
                    },
                )

                @dataclass(slots=True)
                class Contributor:
                    """Attributes:
                    contributor_name:
                    given_name:
                    family_name:
                    contributor_type: The type of contributor of the resource.
                    """

                    contributor_name: (
                        None | Resource.RelatedItems.RelatedItem.Contributors.Contributor.ContributorName
                    ) = field(
                        default=None,
                        metadata={
                            "name": "contributorName",
                            "type": "Element",
                            "required": True,
                        },
                    )
                    given_name: None | object = field(
                        default=None,
                        metadata={
                            "name": "givenName",
                            "type": "Element",
                        },
                    )
                    family_name: None | object = field(
                        default=None,
                        metadata={
                            "name": "familyName",
                            "type": "Element",
                        },
                    )
                    contributor_type: None | ContributorType = field(
                        default=None,
                        metadata={
                            "name": "contributorType",
                            "type": "Attribute",
                            "required": True,
                        },
                    )

                    @dataclass(slots=True)
                    class ContributorName:
                        value: str = field(
                            default="",
                            metadata={
                                "required": True,
                            },
                        )
                        name_type: None | NameType = field(
                            default=None,
                            metadata={
                                "name": "nameType",
                                "type": "Attribute",
                            },
                        )
                        lang: None | str | LangValue = field(
                            default=None,
                            metadata={
                                "type": "Attribute",
                                "namespace": "http://www.w3.org/XML/1998/namespace",
                            },
                        )
